# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapAdder
                                 A QGIS plugin
 Plugin to add map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-03
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Myriam Luce
        email                : luce.myriam@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .map_adder_dialog import MapAdderDialog
import os.path


class MapAdder:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapAdder_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Map Adder')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapAdder', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/map_adder/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Add map'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Map Adder'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MapAdderDialog()
        
        self.dlg.rasterCombo.currentIndexChanged.connect(self.rasterChanged)
        self.dlg.nameEdit.textChanged.connect(self.nameChanged)
        self.dlg.tableCombo.currentIndexChanged.connect(self.nameChanged)
        
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        self.rasters = [layer for layer in layers if layer.layer().type() == QgsMapLayer.RasterLayer]
        self.vectors = [layer for layer in layers if layer.layer().type() == QgsMapLayer.VectorLayer]
        # Clear the contents of the comboBox from previous runs
        self.dlg.rasterCombo.clear()
        self.dlg.tableCombo.clear()
        self.dlg.nameEdit.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.rasterCombo.addItems([layer.name() for layer in self.rasters])
        self.dlg.tableCombo.addItems([layer.name() for layer in self.vectors])
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            try:
                #QgsMessageLog.logMessage("Beginning treatment", tag="Map Adder", level=Qgis.Info)
                (name, raster, table, geom) = self.getInfo()
                onMap = self.mapIsAlreadyThere(table, name)
                if onMap == False:
                    feat = QgsFeature(table.layer().fields())
                    feat.setAttribute("name", name)
                    feat.setAttribute("a", 1.0)
                    feat.setAttribute("b", 21.4)
                    feat.setAttribute("e", 1.0)
                    feat.setAttribute("f", 21.4)
                    feat.setGeometry(geom)
                    table.layer().dataProvider().addFeatures([feat])
                else:
                    fid = onMap.id()
                    table.layer().dataProvider().changeGeometryValues({ fid : geom })
                if self.iface.mapCanvas().isCachingEnabled():
                    table.layer().triggerRepaint()
                else:
                    self.iface.mapCanvas().refresh()
                self.iface.messageBar().pushMessage("Success", "Done", level=Qgis.Success, duration=3)
            except:
                self.iface.messageBar().pushMessage("Error", "Map Adder failed to add or replace geometry", level=Qgis.Critical, duration=3)
    
    def rasterChanged(self):
        """Raster selected has changed: fill the nameEdit with default value"""
        raster = self.rasters[self.dlg.rasterCombo.currentIndex()]
        name = raster.name()[0:raster.name().find("_georeferenced")]
        self.dlg.nameEdit.setText(name)
    
    def nameChanged(self):
        (name, raster, table, geom) = self.getInfo()
        onMap = self.mapIsAlreadyThere(table, name)
        if onMap == False:
            self.dlg.infoLabel.setText("New feature with name {} will be added to {}".format(name, table.name()))
        else:
            self.dlg.infoLabel.setText("Feature named {} will have its geometry replaced".format(name))
    
    def formatExtent(self, extent):
        return "[[{}, {}], [{}, {}]]".format(extent.xMinimum(), extent.xMaximum(), extent.yMinimum(), extent.yMaximum())
    
    def extentToPoints(self, extent):
        one = QgsPointXY(extent.xMinimum(), extent.yMinimum())
        two = QgsPointXY(extent.xMinimum(), extent.yMaximum())
        three = QgsPointXY(extent.xMaximum(), extent.yMaximum())
        four = QgsPointXY(extent.xMaximum(), extent.yMinimum())
        return [one, two, three, four]
    
    def getInfo(self):
        name = self.dlg.nameEdit.text()
        raster = self.rasters[self.dlg.rasterCombo.currentIndex()]
        table = self.vectors[self.dlg.tableCombo.currentIndex()]
        extent = raster.layer().extent()
        crsSrc = raster.layer().crs()
        crsDest = QgsCoordinateReferenceSystem(4326)
        xform = QgsCoordinateTransform(crsSrc, crsDest, QgsProject.instance())
        rect = xform.transformBoundingBox(extent)
        return (name, raster, table, QgsGeometry.fromPolygonXY([self.extentToPoints(rect)]))
    
    def mapIsAlreadyThere(self, table, name):
        fr = QgsFeatureRequest().setFilterExpression ('"name" = \'{}\''.format(name.replace("'", "''")))
        feats = [feat for feat in table.layer().getFeatures(fr)]
        if len(feats) == 0:
            return False
        elif len(feats) == 1:
            return feats[0]
        else:
            raise Exception("Found more than one feature with name '{}' in {}".format(name, table.name()))
    